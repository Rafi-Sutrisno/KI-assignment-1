generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(cuid())
  username          String      @unique
  password_AES      String
  aes_iv            Bytes
  health_data_RC4   String
  income_DES        String
  des_iv            Bytes

  // Symmetric Encription Keys
  key_AES           Bytes
  key_RC4           Bytes
  key_DES           Bytes

  // Asymmetric key for sharing
  publicKey         Bytes
  privateKey        Bytes?

  // Owned files
  user_files        UserFiles[]

  // Has requested file to
  access_requests   UserAccess[]

  // Has given / waiting to give access to
  access_given      UserAccess[] @relation("UserOwnerAccess")
}

model UserFiles {
  id            String @id @default(cuid())
  userId        String
  fileType      String
  fileName      String

  aes_encrypted Bytes
  aes_iv        Bytes

  rc4_encrypted Bytes

  des_encrypted Bytes
  des_iv        Bytes
  
  user          User   @relation(fields: [userId], references:Â [id])
  access        UserAccess[] 
}

model UserAccess {
  id                String @id @default(cuid())
  user_request_id   String
  user_owner_id     String
  file_id           String
  status            Int
  method            String
  
  encrypted_symmetric_key  Bytes? // this key will be encrypted by using the requesting person public key

  user_request     User @relation(fields: [user_request_id], references: [id])
  user_owner       User @relation("UserOwnerAccess", fields: [user_owner_id], references: [id])
  file             UserFiles @relation(fields: [file_id], references: [id])
}